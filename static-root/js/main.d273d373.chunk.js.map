{"version":3,"sources":["logo.svg","lookup/components.js","chats/buttons.js","chats/lookup.js","chats/chatitem.js","chats/list.js","chats/chatform.js","chats/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","console","log","send","ActionBtn","props","chat","action","didPerformAction","likes","display","type","className","handleActionBackend","onClick","event","preventDefault","chatId","id","apiChatAction","ParentChat","parent","Chat","hideActions","didRepost","useState","actionChat","setActionChat","match","pathname","urlChatId","groups","chatid","isDetail","handlePerformAction","newActionChat","content","Fragment","ChatList","chatsInit","setChatsInit","chats","setChats","chatsDidSet","setChatsDidSet","useEffect","final","newChats","concat","username","apiChatList","alert","handleDidRepost","newChat","updatedChatInit","unshift","updatedChatList","map","index","key","ChatForm","textAreaRef","React","createRef","didPost","handleBackEndUpdate","onSubmit","newVal","current","value","ref","required","ChatsComponents","setNewChats","canPost","newChatPost","tempChat","ChatsDetail","didLookup","setDidLookup","setChat","handleBackendLookup","apiChatDetail","App","src","logo","alt","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","chatsEl","MyComponent","dataset","querySelectorAll","forEach","cont","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d273d373.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n\nexport function lookup(method, endpoint, callback, data){\n    let jsonData;\n    if (data){\n        jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n    const url = `http://localhost:8000/api/${endpoint}`;\n    xhr.responseType = \"json\";\n    xhr.open(method, url);\n    const csrftoken = getCookie('csrftoken');\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n   \n    if (csrftoken){\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken) \n    }\n    \n    xhr.onload = function() {\n        // console.log(xhr.response)\n        if (xhr.status === 403) {\n            const detail = xhr.response.detail\n            if (detail = \"Authentication credentials were not provided.\") {\n                window.location.href = \"/login?showLoginRequired=true\"\n            }\n        }\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function(e) {\n        console.log(\"error\", e)\n        callback({\"message\": \"There was an error\"}, 400)\n    }\n    // console.log('jsonData', jsonData)\n    xhr.send(jsonData)\n}\n\n","import React, {useEffect, useState}  from 'react'\nimport {apiCreateChats, apiChatList, apiChatAction} from './lookup'\n\nexport function ActionBtn(props) {\n    const {chat, action, didPerformAction} = props\n    const likes = chat.likes ? chat.likes : 0\n    // const [likes, setLikes] = useState(chat.likes ? chat.likes : 0)\n    // const [clicked, setClick] = useState(false)\n    const display = action.type === \"like\" ?`${likes} ${action.display}` : action.display\n    const className = props.className || 'btn btn-primary btn-sm'\n    // debugger\n    const handleActionBackend = (response, status) => {\n        console.log('s-r', response, status)\n        if ((status === 200 || status === 201) && didPerformAction){\n            // setLikes(response.likes)\n            didPerformAction(response, status)\n            // setClick(true)\n        }\n        // if (action.type === 'like') {\n        //     if (clicked === true){\n        //         setLikes(likes-1)\n        //         setClick(false)\n        //     } else {\n        //         setLikes(chat.likes+1)\n        //         setClick(true)\n        //     }           \n        // }\n    }\n\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiChatAction(chat.id, action.type, handleActionBackend)\n\n    }\n    return <button className={className} onClick={handleClick}> {display} </button> \n}","import { lookup } from '../lookup'\n\nexport function apiChatList(username,callback) {\n    let endpoint = \"chats\"\n    if (username){\n        endpoint = `chats?username=${username}`\n    }\n    lookup(\"GET\", endpoint, callback)\n}\n\nexport function apiChatDetail(chatId, callback) {\n    let endpoint = `chats/${chatId}`    \n    lookup(\"GET\", endpoint, callback)\n}\n\nexport function apiCreateChats(newChat, callback) {\n    lookup(\"POST\", \"chats/create\", callback, {content: newChat})\n}\n\nexport function apiChatAction(chatId, action, callback) {\n    lookup(\"POST\", \"chats/action\", callback, {id: chatId, action: action})\n}","import React, {useEffect, useState}  from 'react'\nimport {apiCreateChats, apiChatList, apiChatAction} from './lookup'\nimport {ActionBtn} from './buttons'\n\n\nexport function ParentChat(props) {\n    const {chat} = props\n    return chat.parent ? <div className='row'> \n                <div className='col-11 mx-auto p-3 border rounded'>\n                    <p className='mb-0 text-muted small'>Reposted</p>\n                    <Chat hideActions className='' chat={chat.parent}/>\n                </div>\n            </div> : null\n}\n\n\nexport function Chat(props) {\n    const {chat, didRepost, hideActions} = props\n    \n    const [ actionChat, setActionChat ] = useState(chat ? chat : null)\n    const className = props.className || 'col-10 mx-auto col-md-6'\n    \n    \n    \n    const path = window.location.pathname\n    const match = path.match(/(?<chatid>\\d+)/)\n    const urlChatId = match ? match.groups.chatid : -1\n\n    const isDetail = `${chat.id}` === `${urlChatId}`\n\n    const handlePerformAction = (newActionChat, status) => {\n        if (status === 200){\n            setActionChat(newActionChat)\n        } else if (status === 201) {\n            if (didRepost) {\n                didRepost(newActionChat)\n            }\n        }\n        \n    }\n    \n    const handleClick = (event) => {\n        event.preventDefault()\n        window.location.href = `/${chat.id}`\n    }\n\n    return <div className={className}>\n        <div>\n            <ParentChat chat={chat}/>\n           <p>{chat.id} - {chat.content}</p> \n           \n        </div>        \n      <div className='btn btn-group'>\n        {(actionChat && hideActions !== true) && <React.Fragment>\n        <ActionBtn chat={actionChat} didPerformAction={handlePerformAction} action={{type: \"like\", display: \"Likes\"}}/>\n        <ActionBtn chat={actionChat} didPerformAction={handlePerformAction} action={{type: \"unlike\", display: \"Unlike\"}}/>\n        <ActionBtn chat={actionChat} didPerformAction={handlePerformAction} action={{type: \"repost\", display: \"Repost\"}}/>   \n        </React.Fragment>}\n        {isDetail === true ? null : <button className=\"btn btn-outline-primary btn-sm\" onClick={handleClick}> View </button>}\n      </div>\n      \n    </div>\n}","import React, {useEffect, useState}  from 'react'\nimport {apiCreateChats, apiChatList, apiChatAction} from './lookup'\nimport {Chat} from './chatitem'\n\nexport function ChatList(props) {\n    const [ chatsInit, setChatsInit ] = useState([])\n    const [ chats, setChats ] = useState([])\n    const [ chatsDidSet, setChatsDidSet ] = useState(false)\n    useEffect(() => {\n        let final = [...props.newChats].concat(chatsInit)\n        if (final.length !== chats.length){\n            setChats(final)\n        }\n        \n    }, [props.newChats, chats, chatsInit])\n    useEffect(() => {\n        if (chatsDidSet === false) {\n            const myCallback = (response, status) => {\n            if (status === 200){\n                setChatsInit(response)\n                setChatsDidSet(true)\n            } else {\n                alert(\"The was an error...\")\n            }     \n            }\n            apiChatList(props.username, myCallback) \n        }\n          \n    }, [chatsInit, chatsDidSet, setChatsDidSet, props.username])\n\n    const handleDidRepost = (newChat) => {\n        const updatedChatInit = [...chatsInit]\n        updatedChatInit.unshift(newChat)\n        setChatsInit(updatedChatInit)\n        const updatedChatList = [...chats]\n        updatedChatList.unshift(newChat)\n        setChats(updatedChatList)\n    }\n\n    return (<div>\n\n        {chats.map((chat, index)=>{\n        return <Chat \n            didRepost={handleDidRepost}\n            key={index} \n            chat={chat} \n            className=\"my-5 py-5 border bg-white text-dark\"/>\n        })}\n    </div>\n    )\n}","import React, {useEffect, useState}  from 'react'\nimport {apiCreateChats, apiChatList, apiChatAction} from './lookup'\nimport {ActionBtn} from './buttons'\nimport {ChatList} from './list'\n\nexport function ChatForm(props){\n        const textAreaRef = React.createRef()\n        const {didPost} = props\n        // const [newChats, setNewChats] = useState([])\n        // const canPost = props.canPost === \"false\" ? false : true\n        const handleBackEndUpdate = (response, status) => {\n            // backend api resp handler\n            // let tempChat = [...newChats]\n            if (status === 201){\n                // tempChat.unshift(response)\n                didPost(response)\n            } else {\n                console.log(response)\n                alert(\"An error occured. Please try again.\")\n            }\n        }\n    \n        const handeSubmit = (e) => {\n            e.preventDefault()\n            const newVal = textAreaRef.current.value   \n            // backend api req  \n            apiCreateChats(newVal, handleBackEndUpdate)\n            textAreaRef.current.value = \"\"\n        }\n        \n    \n        return (\n            <div className={props.className}>\n                    <form onSubmit={handeSubmit} >\n                        <textarea ref={textAreaRef} required={true} className='form-control'></textarea>\n                        <button type='submit' className='btn btn-primary my-3'>Post</button>\n                    </form>   \n            </div>\n        )\n}\n","import React, {useEffect, useState}  from 'react'\nimport {apiCreateChats, apiChatList, apiChatAction} from './lookup'\nimport {ActionBtn} from './buttons'\nimport {ChatList} from './list'\nimport {ChatForm} from './chatform'\nimport {apiChatDetail} from './lookup'\nimport {Chat} from './chatitem'\n\nexport function ChatsComponents(props){\n\n    const [newChats, setNewChats] = useState([])\n    const canPost = props.canPost === \"false\" ? false : true\n    const handleNewChatPost = (newChatPost) => {\n        let tempChat = [...newChats]\n        tempChat.unshift(newChatPost)\n        setNewChats(tempChat)\n    }\n\n    return (\n        <div className={props.className}>\n            { canPost === true && <ChatForm didPost={handleNewChatPost} className=\"col-12 mb-3\"/>}\n            <ChatList newChats={newChats} {...props}/>\n        </div>\n    )\n}\n\nexport function ChatsDetail(props){\n    const {chatId} = props\n    const [didLookup, setDidLookup] = useState(false)\n    const [chat, setChat] = useState(null)\n    const handleBackendLookup = (response, status) => {\n        if (status === 200){\n            setChat(response)\n        } else {\n            alert(\"There is no post\")\n        }\n    }\n    \n    useEffect(() => {\n        if (didLookup === false){\n            apiChatDetail(chatId, handleBackendLookup)\n            setDidLookup(true)\n        }\n    }, [chatId, didLookup, setDidLookup])\n\n            \n    return chat === null ? null : <Chat chat={chat} className={props.className}/>\n}","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {ChatsComponents} from './chats/components'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <ChatsComponents/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {ChatsComponents, ChatsDetail} from './chats'\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst e = React.createElement\nconst chatsEl = document.getElementById(\"chats-root\")\nif (chatsEl) {\n    // console.log(chatsEl.dataset)\n    const MyComponent = e(ChatsComponents, chatsEl.dataset)\n    ReactDOM.render(MyComponent, chatsEl);\n}\n\nconst chatDetailEl = document.querySelectorAll(\".chat-root-detail\")\n\nchatDetailEl.forEach(cont => {\n    ReactDOM.render(e(ChatsDetail, cont.dataset), cont);\n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}